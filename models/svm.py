from sklearn.svm import SVC
import sys
import numpy as np

def main(args):
  if len(sys.argv)!=5:
    print("Expected svm.py malware_csv benign_csv training_amount")
    sys.exit()
  MALWARE_FILE = sys.argv[1]  # malware file path
  BENIGN_FILE = sys.argv[2]  # benign file path
  TRAINING_AMOUNT = int(sys.argv[3])  # number of training files to use e.g. 2000 means 2000 benign files and 2000 malware files
  TESTING_AMOUNT = int(sys.argv[4])  # number of testing files to use e.g. 2000 means 2000 benign files and 2000 malware files

  all_data = []
  classifications = []
  scoring_data = []
  scoring_classifications = []

  construct_arrays( MALWARE_FILE, all_data, classifications, scoring_data,
                    scoring_classifications, TRAINING_AMOUNT,
                    TESTING_AMOUNT, 1
  )

  construct_arrays( BENIGN_FILE, all_data, classifications, scoring_data,
                    scoring_classifications, TRAINING_AMOUNT,
                    TESTING_AMOUNT, 0
  )

  print("Training data count: {}".format(len(all_data)))
  print("Scoring data count: {}".format(len(scoring_data)))

  accuracy = run(all_data, classifications, scoring_data, scoring_classifications)
  print("SVM accuracy: {}".format(accuracy))
  print("Done")

def construct_arrays( file, data, classifications, scoring_data, scoring_classifications,
                training_amount, testing_amount, cla):
  with open(file, "r") as input:
    for i, row in enumerate(input.readlines()):
      features = row.strip().split(" ")[1 : ]
      if i < training_amount:
        data.append(conv_to_float_arr(features[1:]))
        classifications += [cla]
      elif i < (testing_amount + training_amount):
        scoring_data.append(conv_to_float_arr(features[1:]))
        scoring_classifications += [cla]

def conv_to_float_arr(v):
  x = np.array(v)
  return x.astype(np.float)

def run(data, classifications, scoring_data, scoring_classifications):
  classifer = SVC(gamma = "auto")
  classifer.fit(data, classifications)
  accuracy = classifer.score(scoring_data, scoring_classifications)
  return accuracy

if __name__ == "__main__":
  main(sys.argv)